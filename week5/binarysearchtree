#include <stdlib.h> // malloc, atoi, rand
#include <stdio.h>
#include <assert.h> // assert
#include <time.h> // time

////////////////////////////////////////////////////////////////////////////////
// TREE type definition
typedef struct node
{
	int			data;
	struct node	*left;
	struct node	*right;
} NODE;

typedef struct
{
	NODE	*root;
} TREE;

////////////////////////////////////////////////////////////////////////////////
// Prototype declarations

/* Allocates dynamic memory for a tree head node and returns its address to caller
	return	head node pointer
			NULL if overflow
*/
TREE *BST_Create( void);

/* Deletes all data in tree and recycles memory
*/
void BST_Destroy( TREE *pTree);

/* internal function (not mandatory)
*/
static void _destroy( NODE *root);

/* Inserts new data into the tree
	return	1 success
			0 overflow
*/
int BST_Insert( TREE *pTree, int data);

NODE *_makeNode( int data);

/* Deletes a node with dltKey from the tree
	return	1 success
			0 not found
*/
int BST_Delete( TREE *pTree, int dltKey);

/* internal function
	success is 1 if deleted; 0 if not
	return	pointer to root
*/
static NODE *_delete( NODE *root, int dltKey);

/* Retrieve tree for the node containing the requested key
	return	address of data of the node containing the key
			NULL not found
*/
int *BST_Retrieve( TREE *pTree, int key);

/* internal function
	Retrieve node containing the requested key
	return	address of the node containing the key
			NULL not found
*/
static NODE *_retrieve( NODE *root, int key);

/* prints tree using inorder traversal
*/
void BST_Traverse( TREE *pTree);
static void _traverse( NODE *root);

/* Print tree using inorder right-to-left traversal
*/
void printTree( TREE *pTree);
/* internal traversal function
*/
static void _infix_print( NODE *root, int level);

/* 
	return 1 if the tree is empty; 0 if not
*/
int BST_Empty( TREE *pTree);

////////////////////////////////////////////////////////////////////////////////
int main( int argc, char **argv)
{
	TREE *tree;
	int data;
	
	// creates a null tree
	tree = BST_Create();
	
	if (!tree)
	{
		printf( "Cannot create a tree!\n");
		return 100;
	}

	fprintf( stdout, "How many numbers will you insert into a BST: ");

	int numbers;
	scanf( "%d", &numbers);

	fprintf( stdout, "Inserting: ");
	
	srand( time(NULL));
	for (int i = 0; i < numbers; i++)
	{
		data = rand() % (numbers*3) + 1; // random number (1 ~ numbers * 3)
		
		fprintf( stdout, "%d ", data);
		
		// insert funtion call
		int ret = BST_Insert( tree, data);
		if (!ret) break;
 	}
	fprintf( stdout, "\n");
			
	// inorder traversal
	fprintf( stdout, "Inorder traversal: ");
	BST_Traverse( tree);
	fprintf( stdout, "\n");
	
	// print tree with right-to-left infix traversal
	fprintf( stdout, "Tree representation:\n");
	printTree(tree);
	
	while (1)
	{
		fprintf( stdout, "Input a number to delete: "); 
		int num;
		int ret = scanf( "%d", &num);
		if (ret != 1) break;
		
		ret = BST_Delete( tree, num);
		if (!ret)
		{
			fprintf( stdout, "%d not found\n", num);
			continue;
		}
		
		// print tree with right-to-left infix traversal
		fprintf( stdout, "Tree representation:\n");
		printTree(tree);
		
		if (BST_Empty( tree))
		{
			fprintf( stdout, "Empty tree!\n");
			break;
		}
	}
	
	BST_Destroy( tree);

	return 0;
}

TREE *BST_Create( void){
	TREE* tree = (TREE*)malloc(sizeof(TREE));
	tree -> root = NULL;
	return tree;
}

int BST_Insert( TREE *pTree, int data){
	//when tree is empty
	if (BST_Empty(pTree)){
		pTree -> root = _makeNode(data);
		return 1;
	}
	
	//find position to put data
	NODE* insert_pos = pTree -> root;
	NODE* insert_nextpos;
	int pos_check = 0;
	while(1){
		if( data < insert_pos->data ){
			insert_nextpos = insert_pos -> left;
			pos_check = -1;
		}
		else{
			insert_nextpos = insert_pos -> right;
			pos_check = 1;
		}
		
		if( !insert_nextpos )  break;
		insert_pos = insert_nextpos;
	}
	
	//insert data
	if(pos_check == -1){
		insert_pos -> left = _makeNode(data);
	}
	else if(pos_check == 1){
		insert_pos -> right = _makeNode(data);
	}
	else  return 0;
}

NODE *_makeNode( int data){
	NODE* pNode = (NODE*)malloc(sizeof(NODE));
	pNode -> data = data;
	pNode -> left = NULL;
	pNode -> right = NULL;
	return pNode;
}

void printTree( TREE *pTree){
	_infix_print(pTree->root, 0);
	
	return;
}

static void _infix_print( NODE *root, int level){
	if(root){
		_infix_print( root -> right, level+1 );

		for (int i = 0; i < level; i++)	printf("\t");
		printf("%d\n", root -> data);
		
		_infix_print( root -> left, level+1 );
	}
}

void BST_Traverse( TREE *pTree){
	_traverse(pTree->root);
	return;
}

static void _traverse( NODE *root){
	if(root != NULL){
		_traverse(root->left);
		printf("%d ",root->data);
		_traverse(root->right);
	}
}

void BST_Destroy( TREE *pTree){
	if(pTree) _destroy( pTree -> root );
	free(pTree);
}

static void _destroy( NODE *root){
	if (!root)	return;
	
	_destroy( root -> left );
	_destroy( root -> right );
	free(root);
}

int BST_Empty( TREE *pTree){
	if(!pTree->root)	return 1;
	return 0;
}

int BST_Delete( TREE *pTree, int dltKey){
	NODE* del_pos = _retrieve(pTree->root, dltKey);
	// fail to find delkey
	if(!del_pos) return 0;
	else{
		pTree -> root = _delete( pTree -> root, dltKey);
		return 1;
	}
}

static NODE *_delete( NODE *root, int dltKey){
	if(dltKey < root->data)
		root->left = _delete( root->left, dltKey );
	else if(dltKey > root->data)
		root->right = _delete( root->right, dltKey );
		//found del_pos
	else{
		NODE* temp = root;
		//del_pos have 2 children.
		if( root->right != NULL && root->left != NULL ){
			temp = temp -> right;
			while(temp->left){
				temp = temp -> left;
			}
			root -> data = temp -> data;
			root -> right = _delete( root->right, root->data );
		}
		else{
			if(root->left == NULL) temp = root->right;
			else temp = root->left;
			free(root);
			return temp;
		}
	}
	return root;
}

int *BST_Retrieve( TREE *pTree, int key){
	NODE* find_pos = _retrieve(pTree->root, key);
	if(!find_pos) return NULL;
	else return &(find_pos -> data);
}

static NODE *_retrieve( NODE *root, int key){
	if(!root)  return NULL;
	
	if(root -> data == key)	return root;
	else if ( key < root->data )  _retrieve(root->left, key);
	else if ( key > root->data )  _retrieve(root->right, key);
}
